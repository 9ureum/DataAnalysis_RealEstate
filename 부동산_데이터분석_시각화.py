# -*- coding: utf-8 -*-
"""부동산_데이터분석_시각화.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a4u18ccYUbtpo-rzfhPuWF4Ak6mx-AKB
"""

import pandas as pd
from google.colab import files

uploaded = files.upload()

import pandas as pd
from google.colab import files

uploaded = files.upload()

from IPython.utils.sysinfo import encoding
import pandas as pd
df1 = pd.read_csv('./아파트(매매)__실거래가_20230426083418.csv', skiprows = 15, encoding = 'cp949')
df2 = pd.read_csv('./아파트(전월세)_실거래가_20230426082902.csv', skiprows = 15, encoding = 'cp949')
print(df1.columns)
print(df2.columns)
print(len(df1))
print(len(df2))

import numpy as np
import matplotlib.pyplot as plt

def salesPrice(df1):
  pps = []
  aptInfo = []

  for i in range(0, len(df1)):
    isCancel = str(df1.loc[i][12])
    size = float(df1.loc[i][5])
    price = int(str(df1.loc[i][8]).replace(",", ""))
    contractType = str(df1.loc[i][13])
    pricePerSize = float(price / size)
    if len(isCancel) < 6 and "중개거래" == contractType:
      pps.append(pricePerSize)
      aptInfo.append(df1.loc[i])

  allCount = 0
  monthlySalesPrice = []
  yymmList = []
  volumnCnt = []
  for i in range(2022, 2024):
    for j in range(4, 16):
      if i == 2022 and j == 13:
        break
      if i == 2023:
        j = j - 3
      if i == 2023 and j > 3:
        break
      yymm = str(i)
      if j < 10:
        yymm = yymm + "0" + str(j)
      else:
        yymm = yymm + str(j)
      monthly = []
      cnt = 0
      s = []
      p = []

      for k in range(0, len(aptInfo)):
        if yymm == str(aptInfo[k][6]):
          size = float(aptInfo[k][5])
          price = int(str(aptInfo[k][8]).replace(",",""))
          s = size
          p = price
          pricePerSize = float(price / size)
          monthly.append(pricePerSize)
          cnt = cnt + 1
          allCount = allCount + 1
      yymmList.append(yymm)
      volumnCnt.append(cnt)
      print(yymm, " ", np.mean(monthly), " ", cnt)
      monthlySalesPrice.append(np.mean(monthly))
  print(allCount, " - ", (allCount / 12))
  return volumnCnt, yymmList, monthlySalesPrice

def jeonsePrice(df1):
  pps = []
  aptInfo = []

  for i in range(0, len(df1)):
    size = float(df1.loc[i][6])
    price = int(str(df1.loc[i][9]).replace(",", ""))
    contractType = str(df1.loc[i][15])
    pricePerSize = float(price / size)
    isJeonse = str(df1.loc[i][5])
    if "전세" == isJeonse and "신규" == contractType:
      pps.append(pricePerSize)
      aptInfo.append(df1.loc[i])

  allCount = 0
  monthlyJeonsePrice = []
  yymmList = []
  volumnCnt = []
  for i in range(2022, 2024):
    for j in range(4, 16):
      if i == 2022 and j == 13:
        break
      if i == 2023:
        j = j - 3
      if i == 2023 and j > 3:
        break
      yymm = str(i)
      if j < 10:
        yymm = yymm + "0" + str(j)
      else:
        yymm = yymm + str(j)
      monthly = []
      cnt = 0
      s = []
      p = []
      for k in range(0, len(aptInfo)):
        if yymm == str(aptInfo[k][7]):
          size = float(aptInfo[k][6])
          price = int(str(aptInfo[k][9]).replace(",",""))
          s = size
          p = price
          pricePerSize = float(price / size)
          monthly.append(pricePerSize)
          cnt = cnt + 1
          allCount = allCount + 1
      yymmList.append(yymm)
      volumnCnt.append(cnt)
      print(yymm, " ", np.mean(monthly), " ", cnt)
      monthlyJeonsePrice.append(np.mean(monthly))
  print(allCount, " - ", (allCount / 12))
  return volumnCnt, yymmList, monthlyJeonsePrice

def showGraph(volumeCountSales, volumeCountJeonse, yymm, salesPpsList, jeonsePpsList, jeonseRateList):
  import matplotlib.pyplot as plt
  import seaborn as sns
  fig, ax1 = plt.subplots()

  for i in range(0, len(yymm)):
    yymm[i] = str(yymm[i])[2:]

  ax1.plot(yymm, salesPpsList, label = 'Sales', color = 'red', marker = 'o')
  ax1.plot(yymm, jeonsePpsList, label = 'Jeonse', color = 'blue', marker = 'x')

  ax2 = ax1.twinx()
  ax2.plot(yymm, jeonseRateList, label = 'JeonsePerSalesPrice', color = 'grey', marker = '*')
  plt.xlabel('yymm')
  plt.grid(True)
  #plt.show()

def getJeonseRate(salesPpsList, jeonsePpsList):
  jr = []
  for i in range(0, len(salesPpsList)):
    jr.append(float(jeonsePpsList[i] / salesPpsList[i] * 100))
  return jr

vms, ym, sp = salesPrice(df1)
vmj, ym, jp = jeonsePrice(df2)
jr = getJeonseRate(sp, jp)
showGraph(vms, vmj, ym, sp, jp, jr)
plt.savefig('부동산그래프.png')
plt.show()